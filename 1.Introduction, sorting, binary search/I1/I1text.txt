Задача I. Что? Да! Пузырек
     Имя входного файла:             стандартный ввод
     Имя выходного файла:            стандартный вывод
     Ограничение по времени:         2 секунды
     Ограничение по памяти:          256 мегабайт
   Вам дан код сортировки пузырьком:
for iteration in range(n):
    had_swaps = False
    for i in range(n - 1):
        if a[i] > a[i + 1]:
            a[i], a[i + 1] = a[i + 1], a[i]
            had_swaps = True
    if not had_swaps:
        break
   А еще дан массив размера n, состоящий из нулей. Все 0 по очереди превращаются в 1, в порядке,
заданном в тесте. От вас требуется после каждой замены говорить, сколько внешних циклов сделает
алгоритм сортировки (до вызова break), если его запустить на массиве.
   Заметьте, что вы не должны сортировать, вы должны только сказать, сколько итераций пона-
добилось бы на сортировку.
Формат входных данных
   В первой строке задано целое число n (1 <= n <= 300000) — количество элементов в массиве.
   Следующая строка содержит n целых различных чисел p1 , p2 , . . . , pn (1 <= pi <= n) — позиции
нулей, если смотреть слева направо, которые меняются на 1. Сначала меняется ноль, находящийся
на позиции p1 , затем на позиции p2 и так далее.
Формат выходных данных
   Выведите n + 1 число a0 , a1 , . . . , an , где a0 — количество итераций для упорядочивания последо-
вательности в начале, a1 — сложность упорядочивания после первой замены и так далее.
Примеры
                 стандартный ввод                              стандартный вывод
    4                                              1 2 3 2 1
    1 3 4 2
    11                                             1 2 3 4 5 6 7 8 9 6 2 1
    10 8 9 4 6 3 5 1 11 7 2

Замечание
    В первом тесте сначала нужно отсортировать [0, 0, 0, 0], это можно сделать за один проход (ко-
торый поймет, что все отсортировано).
    Затем нужно отсортировать [1, 0, 0, 0], это можно сделать за 2 прохода. Первый проход сделает
все свапы, а второй проверит, что больше свапы не нужны.
    Затем нужно отсортировать [1, 0, 1, 0], на что потребуется 3 прохода.
    Затем сортируется [1, 0, 1, 1], на что потребуется 2 прохода - на первую единицу и финальная
проверка сортированности.
    Для сортировки [1, 1, 1, 1] нужен один проход.
